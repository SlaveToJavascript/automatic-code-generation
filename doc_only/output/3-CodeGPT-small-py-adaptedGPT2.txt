. @type: int @raises TypeError: raised when the square root of an integer is invalid. """ if not isinstance(self.value, int): raise TypeError("Square root must be an integer.") if self.value < 0: raise ValueError("Square root must be positive.") return math.sqrt(self.value) </s><pad> def __init__(self, *, location: str, **kwargs) -> None: super(VirtualMachineScaleSetVMScaleSet, self).__init__(**kwargs) self.location = location </s><pad> def __init__(self, *, is_default_vm_instance_enabled: bool, **kwargs) -> None: super(VirtualMachine, self).__init__(**kwargs) self.is_default_vm_instance_enabled = is_default_vm_instance_enabled </s><pad> def __init__(self, text, start_mark): self.text = text self.start_mark = start_mark </s><pad> def __init__(self, name, type, raw_value): super(AttributeValidationException, self).__init__("AttributeValidationException: Invalid input: '%s' for attribute '%s'" % (raw_value, name)) </s><pad> def _get_bins(self): """Return the number of bins for