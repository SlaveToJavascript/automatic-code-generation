 # Check if the root of the array is bigger than half the window area if square_root < i: # If the array is half, check if the root is bigger than half the window area if square_root > i: row_size = int(round((square_root / i) * 100)) col_size = int(round((square_root / i) * 100)) else: row_size = 1 col_size = 1 return row_size, col_size </s><pad> def _parse_line(self, line): """Parse the line, update the dict, and return the new data as a dictionary.""" line = line.rstrip() if line.startswith('['): self.parse_value(line[1:]) # no new value in the line, we have to create one # from the rest self.data = {} return self.data else: # the line is a line that is not a ":" # if '[' in line: # # The first character of the line is an ack. # self._parse_list([line.strip().split()]) self.data = {} # Update the header with the new data. self.header = line.split()[0] return self.data </s><pad> def __init__(self, app): super(LambdaManager, self).__init__(app) self.